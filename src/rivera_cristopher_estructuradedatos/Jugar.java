/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rivera_cristopher_estructuradedatos;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author river
 */
public class Jugar extends javax.swing.JFrame {

    String[] palabras = {"ROSA", "OTOÑO", "BAILE", "JARDIN", "MASCARA", "CASTILLO", "PARIS", "VIAJE", "MELODIA", "RIO"};
    String adivinar;
    char letra;
    int oportunidades;
    Random random = new Random();
    String[] progreso;
    boolean acierto;
    
    public Jugar() {
        // Selección aleatoria de la palabra
        adivinar = palabras[random.nextInt(palabras.length)];
        
        // Inicialización de progreso con "_ " para cada letra
        progreso = new String[adivinar.length()];
        for (int i = 0; i < adivinar.length(); i++) {
            progreso[i] = "_ ";  // Se usa "_ " como espacio para cada letra
        }

        oportunidades = 5;  // Número de oportunidades
        initComponents();  // Inicialización del formulario
        actualizar();
    }
    
    private void actualizar() {
        String texto = "";  // String para almacenar el progreso

    // Concatenamos cada elemento de 'progreso' para mostrarlo en el campo 'resultado'
    for (int i = 0; i < progreso.length; i++) {
        texto += progreso[i];  // Agrega cada letra o guion bajo
    }

    // Actualiza el campo de texto 'resultado' con el progreso actual
    resultado.setText(texto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        entrada = new javax.swing.JTextField();
        resultado = new javax.swing.JTextField();
        validar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaActionPerformed(evt);
            }
        });

        resultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoActionPerformed(evt);
            }
        });

        validar.setText("Validar letra");
        validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validarActionPerformed(evt);
            }
        });

        jLabel1.setText("AHORCADOS");

        jLabel2.setText("Ingrese una letra");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validar)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(validar)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradaActionPerformed
        // TODO add your handling code here:
        if (entrada.getText().length() != 1) {
            JOptionPane.showMessageDialog(this, "Solo se permite una letra.");
        }
        letra = entrada.getText().toUpperCase().charAt(0);
    }//GEN-LAST:event_entradaActionPerformed

    private void resultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoActionPerformed
        // TODO add your handling code here:
        actualizar();
    }//GEN-LAST:event_resultadoActionPerformed

    private void validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validarActionPerformed
        // TODO add your handling code here:
        String textoEntrada = entrada.getText().toUpperCase();  // Se toma el texto y se convierte a mayúsculas

    // Validar si solo se ha ingresado una letra
    if (textoEntrada.length() != 1) {
        JOptionPane.showMessageDialog(this, "Solo se permite ingresar una letra.");
        entrada.setText("");  // Limpiar el campo de entrada después de un error
        return;
    }

    // Obtener el primer (y único) carácter de la entrada
    char letra = textoEntrada.charAt(0);  // Tomar el primer carácter

    // Reiniciamos la variable 'acierto' como false al inicio de cada validación
    acierto = false;

    // Comprobamos si la letra está en la palabra
    for (int i = 0; i < adivinar.length(); i++) {
        // Compara el carácter de la palabra con la letra ingresada
        if (adivinar.charAt(i) == letra) {  // Comparamos char con char
            progreso[i] = String.valueOf(letra);  // Actualizamos el progreso con la letra correcta
            acierto = true;
        }
    }

    // Si la letra es correcta, mostramos un mensaje al usuario
    if (acierto) {
        JOptionPane.showMessageDialog(this, "¡Correcto! La letra '" + letra + "' está en la palabra.");
    } else {
        // Si la letra es incorrecta, mostramos un mensaje y restamos oportunidades
        JOptionPane.showMessageDialog(this, "Incorrecto. La letra '" + letra + "' no está en la palabra.");
        oportunidades--;  // Reducimos las oportunidades
    }

    // Si no se ha acertado y se han agotado las oportunidades
    if (oportunidades == 0) {
        JOptionPane.showMessageDialog(this, "PERDISTE. La palabra era: " + adivinar);
        reiniciar();  // Reinicia el juego si se pierden todas las oportunidades
    }

    // Verificamos si se ha adivinado toda la palabra
    boolean gameover = true;
    for (int i = 0; i < progreso.length; i++) {
        if (progreso[i].equals("_ ")) {  // Si encontramos un espacio en blanco, el juego no ha terminado
            gameover = false;
            break;
        }
    }

    // Si no quedan más espacios en blanco, el jugador gana
    if (gameover) {
        JOptionPane.showMessageDialog(this, "¡GANASTE! Lograste adivinar la palabra.");
        reiniciar();  // Reinicia el juego después de ganar
    }

    // Actualiza la interfaz con el progreso actual
    actualizar();
    }//GEN-LAST:event_validarActionPerformed

    private void reiniciar() {
        adivinar = palabras[random.nextInt(palabras.length)];
        progreso = new String[adivinar.length()];
        for (int i = 0; i < adivinar.length(); i++) {
            progreso[i] = "_ ";  // Inicializar nuevamente el progreso
        }
        oportunidades = 5;  // Se reinician las oportunidades
        actualizar();  // Actualizar la interfaz con el progreso  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jugar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField entrada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField resultado;
    private javax.swing.JButton validar;
    // End of variables declaration//GEN-END:variables
}
